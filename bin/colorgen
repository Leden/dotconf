#!/usr/bin/python3 -IBbbWall

import collections
import colorsys
import fcntl
import itertools
import math
import os
import random


RGB = collections.namedtuple('RGB', 'r g b')
HSV = collections.namedtuple('HSV', 'h s v')


STATE_FILE = '/tmp/colorgen.state'


#WHITE = RGB(255, 255, 255)
PHI = ( 1 + math.sqrt(5) ) / 2


def lock_file(f):
        fcntl.lockf(f, fcntl.LOCK_EX)


def unlock_file(f):
        fcntl.lockf(f, fcntl.LOCK_UN)


class StateFile(object):
    def __init__(self, file_name):
        self.f = open(file_name, 'w+')
        lock_file(self.f)

    def __enter__(self, *args, **kwars):
        return self.f

    def __exit__(self, exc_type=None, exc_value=None, traceback=None):
        self.f.flush()
        os.fsync(self.f.fileno())
        unlock_file(self.f)
        self.f.close()
        return exc_type is None


def hsv_to_rgb(hsv):
    return RGB(*(int(c * 255) for c in colorsys.hsv_to_rgb(*hsv)))


def mix(rgb1, rgb2):
    return RGB(*(int(c1 + c2) // 2 for (c1, c2) in itertools.zip(rgb1, rgb2)))


def get_state(sf):
    try:
        return float(sf.readlines()[0])
    except IndexError:
        return None
    except ValueError:
        return None


def put_state(sf, value):
    sf.seek(0)
    sf.write(str(value))


def main():
    with StateFile(STATE_FILE) as sf:
        h = get_state(sf)
        if not h:
            h = random.random()
        h = (h + (1 / PHI)) % 1
        put_state(sf, h)

    color_hsv = HSV(h, 0.6, 0.99)
    color_rgb = hsv_to_rgb(color_hsv)

    print('#%02x%02x%02x' % color_rgb)


if __name__ == '__main__':
    main()
