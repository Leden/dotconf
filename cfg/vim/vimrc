source $HOME/cfg/vim/include/*

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Enable folding
set foldmethod=indent
set foldlevel=99

" Enable folding with the spacebar
nnoremap <space> za

" proper PEP 8 indentation
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=88 |
    \ set colorcolumn=88 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

" web indentation
au BufNewFile,BufRead *.js,*jsx,*.html,*.css
    \ set expandtab |
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2

" Haskell syntax
au BufNewFile,BufRead *.hs
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

" highlight whitespace errors
highlight BadWhitespace ctermfg=16 ctermbg=253 guifg=#000000 guibg=#F8F8F0
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

au WinLeave * set nocursorline nocursorcolumn
au WinEnter * set cursorline cursorcolumn
set cursorline cursorcolumn

set encoding=utf-8

" YouCompleteMe customization
let g:ycm_autoclose_preview_window_after_completion=1
" map <leader>d  :YcmCompleter GoToDefinitionElseDeclaration<CR>
" map <leader>r  :YcmCompleter GoToReferences<CR>

"python with virtualenv support
"py3 << EOF
"import os
"import sys
"if 'VIRTUAL_ENV' in os.environ:
  "project_base_dir = os.environ['VIRTUAL_ENV']
  "activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
  "exec(open(activate_this).read(), dict(__file__=activate_this))
"EOF

" make code look pretty
let python_highlight_all=1
syntax on

" NERDTree: hide .pyc files
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree

" NERDTree: open on Ctrl-N
map <C-n>t :NERDTreeToggle<CR>
map <C-n>n :NERDTreeFind<CR>

" relative line numbers
set nu rnu

let g:auto_save = 0  " enable AutoSave on Vim startup
let g:auto_save_in_insert_mode = 0  " do not save while in insert mode

" Fugitive bindings
nnoremap <Leader>gg :Ggrep<Space>

" Tagbar bindings
nmap <F8> :TagbarToggle<CR>

" CtrlP conf
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_show_hidden = 1

" Syntastic conf
let g:syntastic_python_checkers = ['python']

" jedi conf
let g:jedi#use_splits_not_buffers = "right"

" vim-mix-format conf
let g:mix_format_on_save = 1

" Run a shell command and display its output in a new tab
function! s:ExecuteInShell(command)
  let command = join(map(split(a:command), 'expand(v:val)'))
  let winnr = bufwinnr('^' . command . '$')
  silent! execute  winnr < 0 ? 'botright new ' . fnameescape(command) : winnr . 'wincmd w'
  setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap number
  echo 'Execute ' . command . '...'
  silent! execute 'silent %!'. command
  silent! execute 'resize ' . line('$')
  silent! redraw
  silent! execute 'au BufUnload <buffer> execute bufwinnr(' . bufnr('#') . ') . ''wincmd w'''
  silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . command . ''')<CR>'
  echo 'Shell command ' . command . ' executed.'
endfunction
command! -complete=shellcmd -nargs=+ Shell call s:ExecuteInShell(<q-args>)

" color scheme
colors zenburn

" ALE
let g:ale_fixers = {
\   'javascript': [],
\   'vue': [],
\   'css': [],
\   'yaml': [],
\}
let g:ale_fix_on_save = 1

" fix vue syntax highlighting slowness?
let g:vue_pre_processors = []

" load project-specific .vimrc
set exrc
set secure
